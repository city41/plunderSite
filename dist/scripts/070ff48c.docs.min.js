(function () {
/**
 * almond 0.2.6 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

/**
 * almond 0.2.6 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */

(function(e,t){typeof define=="function"&&define.amd?define('plunder',t):typeof module=="object"?module.exports=t():e.Plunder=t()})(this,function(){var e,t,n;(function(r){function d(e,t){return h.call(e,t)}function v(e,t){var n,r,i,s,o,u,a,f,c,h,p=t&&t.split("/"),d=l.map,v=d&&d["*"]||{};if(e&&e.charAt(0)===".")if(t){p=p.slice(0,p.length-1),e=p.concat(e.split("/"));for(f=0;f<e.length;f+=1){h=e[f];if(h===".")e.splice(f,1),f-=1;else if(h===".."){if(f===1&&(e[2]===".."||e[0]===".."))break;f>0&&(e.splice(f-1,2),f-=2)}}e=e.join("/")}else e.indexOf("./")===0&&(e=e.substring(2));if((p||v)&&d){n=e.split("/");for(f=n.length;f>0;f-=1){r=n.slice(0,f).join("/");if(p)for(c=p.length;c>0;c-=1){i=d[p.slice(0,c).join("/")];if(i){i=i[r];if(i){s=i,o=f;break}}}if(s)break;!u&&v&&v[r]&&(u=v[r],a=f)}!s&&u&&(s=u,o=a),s&&(n.splice(0,o,s),e=n.join("/"))}return e}function m(e,t){return function(){return s.apply(r,p.call(arguments,0).concat([e,t]))}}function g(e){return function(t){return v(t,e)}}function y(e){return function(t){a[e]=t}}function b(e){if(d(f,e)){var t=f[e];delete f[e],c[e]=!0,i.apply(r,t)}if(!d(a,e)&&!d(c,e))throw new Error("No "+e);return a[e]}function w(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function E(e){return function(){return l&&l.config&&l.config[e]||{}}}var i,s,o,u,a={},f={},l={},c={},h=Object.prototype.hasOwnProperty,p=[].slice;o=function(e,t){var n,r=w(e),i=r[0];return e=r[1],i&&(i=v(i,t),n=b(i)),i?n&&n.normalize?e=n.normalize(e,g(t)):e=v(e,t):(e=v(e,t),r=w(e),i=r[0],e=r[1],i&&(n=b(i))),{f:i?i+"!"+e:e,n:e,pr:i,p:n}},u={require:function(e){return m(e)},exports:function(e){var t=a[e];return typeof t!="undefined"?t:a[e]={}},module:function(e){return{id:e,uri:"",exports:a[e],config:E(e)}}},i=function(e,t,n,i){var s,l,h,p,v,g=[],w;i=i||e;if(typeof n=="function"){t=!t.length&&n.length?["require","exports","module"]:t;for(v=0;v<t.length;v+=1){p=o(t[v],i),l=p.f;if(l==="require")g[v]=u.require(e);else if(l==="exports")g[v]=u.exports(e),w=!0;else if(l==="module")s=g[v]=u.module(e);else if(d(a,l)||d(f,l)||d(c,l))g[v]=b(l);else{if(!p.p)throw new Error(e+" missing "+l);p.p.load(p.n,m(i,!0),y(l),{}),g[v]=a[l]}}h=n.apply(a[e],g);if(e)if(s&&s.exports!==r&&s.exports!==a[e])a[e]=s.exports;else if(h!==r||!w)a[e]=h}else e&&(a[e]=n)},e=t=s=function(e,t,n,a,f){return typeof e=="string"?u[e]?u[e](t):b(o(e,t).f):(e.splice||(l=e,t.splice?(e=t,t=n,n=null):e=r),t=t||function(){},typeof n=="function"&&(n=a,a=f),a?i(r,e,t,n):setTimeout(function(){i(r,e,t,n)},4),s)},s.config=function(e){return l=e,l.deps&&s(l.deps,l.callback),s},e._defined=a,n=function(e,t,n){t.splice||(n=t,t=[]),!d(a,e)&&!d(f,e)&&(f[e]=[e,t,n])},n.amd={jQuery:!0}})();var r={}.hasOwnProperty;n("Util",[],function(){var e,t,n,i,s,o,u;s=function(e){return e===(e|0)},e={rand:function(t,n,r){var i,o,u,a,f;return r==null&&(r=!1),f=!r,o=e.isNumber(n)?t:0,i=e.isNumber(n)?n:t,u=i-o,a=Math.random()*u+o,s(o)&&s(i)&&f?Math.floor(a):a},coin:function(){return this.rand(0,2)===0},degreesToRadians:function(e){return e*Math.PI/180},radiansToDegrees:function(e){return e*180/Math.PI},isUndefined:function(e){return typeof e=="undefined"},isPrimitive:function(e){return e===!0||e===!1||this.isString(e)||this.isNumber(e)},areSameTypes:function(e,t){return this.isArray(e)?this.isArray(t):this.isArray(t)?!1:typeof e==typeof t},extend:function(e,t){var n,i;if(e!=null)for(n in t){if(!r.call(t,n))continue;i=t[n],e[n]=i}return e},clone:function(e){return!e||this.isPrimitive(e)?e:this.isArray(e)?e.slice(0):this.extend({},e)},toArray:function(e){return e==null?[]:this.isArray(e)?e:[e]},last:function(e){return e&&e[e.length-1]},first:function(e){return e&&e[0]},isEmpty:function(e){return e&&e.length===0},any:function(e){return e&&e.length>0}},e.isArray=Array.isArray||function(e){return Object.prototype.toString.call(e)==="[object Array]"},t=function(e){return function(t){return Object.prototype.toString.call(t)==="[object "+e+"]"}},u=["Arguments","Function","String","Number","Date","RegExp"];for(i=0,o=u.length;i<o;i++)n=u[i],e["is"+n]=t(n);return e}),n("Bezier",["./Util"],function(e){var t;return t=function(){function t(t){e.extend(this,t),this.reset()}return t.prototype.reset=function(){return this._elapsed=0,this.done=this._elapsed>=this.duration,this._targetsInitted=!1},t.prototype.reverse=function(){return new t({targets:this.targets,points:this._reversePoints(this.points),duration:this.duration})},t.prototype._reversePoints=function(t){return t=e.clone(t),this._swap(t,0,3),this._swap(t,1,2),t},t.prototype._swap=function(e,t,n){var r;return r=e[t],e[t]=e[n],e[n]=r},t.prototype._initTargets=function(){var e,t,n,r;r=this.targets;for(t=0,n=r.length;t<n;t++)e=r[t],e.x=this.points[0].x,e.y=this.points[0].y;return this._targetsInitted=!0},t.prototype.update=function(e){var t,n,r,i,s;if(this.done||this.disabled)return;this._targetsInitted||this._initTargets(),this._elapsed+=e;if(this._elapsed>this.duration)return this._elapsed=this.duration,this.done=!0;i=this.targets,s=[];for(n=0,r=i.length;n<r;n++)t=i[n],s.push(this._move(t));return s},t.prototype._move=function(e){var t,n,r,i;return t=this._elapsed/this.duration,i=this._computeBezier(0,t),n=i.x,r=i.y,e.x=n,e.y=r},t.prototype._computeBezier=function(e,t){var n,r,i,s,o,u,a,f,l,c,h,p,d,v,m,g,y,b;return a=t,i=this.points[e],s=this.points[e+1],o=this.points[e+2],u=this.points[e+3],n=1-a,r=n*n*n,f=a*a*a,c=r*i.x,h=3*a*n*n*s.x,p=3*a*a*n*o.x,d=f*u.x,l=c+h+p+d,m=r*i.y,g=3*a*n*n*s.y,y=3*a*a*n*o.y,b=f*u.y,v=m+g+y+b,{x:l,y:v}},t}()}),n("Easie",[],function(){var e;return e=function(){function e(){}return e.backIn=function(e,t,n,r,i){return i==null&&(i=1.70158),n*(e/=r)*e*((i+1)*e-i)+t},e.backOut=function(e,t,n,r,i){return i==null&&(i=1.70158),n*((e=e/r-1)*e*((i+1)*e+i)+1)+t},e.backInOut=function(e,t,n,r,i){return i==null&&(i=1.70158),(e/=r/2)<1?n/2*e*e*(((i*=1.525)+1)*e-i)+t:n/2*((e-=2)*e*(((i*=1.525)+1)*e+i)+2)+t},e.bounceOut=function(e,t,n,r){return(e/=r)<1/2.75?n*7.5625*e*e+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t},e.bounceIn=function(t,n,r,i){return r-e.bounceOut(i-t,0,r,i)+n},e.bounceInOut=function(t,n,r,i){return t<i/2?e.bounceIn(t*2,0,r,i)*.5+n:e.bounceOut(t*2-i,0,r,i)*.5+r*.5+n},e.circIn=function(e,t,n,r){return-n*(Math.sqrt(1-(e/=r)*e)-1)+t},e.circOut=function(e,t,n,r){return n*Math.sqrt(1-(e=e/r-1)*e)+t},e.circInOut=function(e,t,n,r){return(e/=r/2)<1?-n/2*(Math.sqrt(1-e*e)-1)+t:n/2*(Math.sqrt(1-(e-=2)*e)+1)+t},e.cubicIn=function(e,t,n,r){return n*(e/=r)*e*e+t},e.cubicOut=function(e,t,n,r){return n*((e=e/r-1)*e*e+1)+t},e.cubicInOut=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t},e.elasticOut=function(e,t,n,r,i,s){var o;return i==null&&(i=null),s==null&&(s=null),e===0?t:(e/=r)===1?t+n:(s==null&&(s=r*.3),i==null||i<Math.abs(n)?(i=n,o=s/4):o=s/(2*Math.PI)*Math.asin(n/i),i*Math.pow(2,-10*e)*Math.sin((e*r-o)*2*Math.PI/s)+n+t)},e.elasticIn=function(e,t,n,r,i,s){var o;return i==null&&(i=null),s==null&&(s=null),e===0?t:(e/=r)===1?t+n:(s==null&&(s=r*.3),i==null||i<Math.abs(n)?(i=n,o=s/4):o=s/(2*Math.PI)*Math.asin(n/i),e-=1,-(i*Math.pow(2,10*e))*Math.sin((e*r-o)*2*Math.PI/s)+t)},e.elasticInOut=function(e,t,n,r,i,s){var o;return i==null&&(i=null),s==null&&(s=null),e===0?t:(e/=r/2)===2?t+n:(s==null&&(s=r*.3*1.5),i==null||i<Math.abs(n)?(i=n,o=s/4):o=s/(2*Math.PI)*Math.asin(n/i),e<1?-0.5*i*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI/s))+t:i*Math.pow(2,-10*(e-=1))*Math.sin((e*r-o)*2*Math.PI/s)+n+t)},e.expoIn=function(e,t,n,r){return e===0?t:n*Math.pow(2,10*(e/r-1))+t},e.expoOut=function(e,t,n,r){return e===r?t+n:n*(-Math.pow(2,-10*e/r)+1)+t},e.expoInOut=function(e,t,n,r){return e===0?t:e===r?t+n:(e/=r/2)<1?n/2*Math.pow(2,10*(e-1))+t:n/2*(-Math.pow(2,-10*(e-1))+2)+t},e.linearNone=function(e,t,n,r){return n*e/r+t},e.linearIn=function(t,n,r,i){return e.linearNone(t,n,r,i)},e.linearOut=function(t,n,r,i){return e.linearNone(t,n,r,i)},e.linearInOut=function(t,n,r,i){return e.linearNone(t,n,r,i)},e.linear=function(t,n,r,i){return e.linearNone(t,n,r,i)},e.quadIn=function(e,t,n,r){return n*(e/=r)*e+t},e.quadOut=function(e,t,n,r){return-n*(e/=r)*(e-2)+t},e.quadInOut=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*((e-=1)*(e-2)-1)+t},e.quartIn=function(e,t,n,r){return n*(e/=r)*e*e*e+t},e.quartOut=function(e,t,n,r){return-n*((e=e/r-1)*e*e*e-1)+t},e.quartInOut=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e+t:-n/2*((e-=2)*e*e*e-2)+t},e.quintIn=function(e,t,n,r){return n*(e/=r)*e*e*e*e+t},e.quintOut=function(e,t,n,r){return n*((e=e/r-1)*e*e*e*e+1)+t},e.quintInOut=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t},e.sineIn=function(e,t,n,r){return-n*Math.cos(e/r*(Math.PI/2))+n+t},e.sineOut=function(e,t,n,r){return n*Math.sin(e/r*(Math.PI/2))+t},e.sineInOut=function(e,t,n,r){return-n/2*(Math.cos(Math.PI*e/r)-1)+t},e}()}),n("Accessor",["./Util"],function(e){var t;return t=function(){function t(e,t){this.obj=e,this.paths=t.split(".")}return t.prototype.get=function(){var e,t,n,r,i;e=this.obj,i=this.paths;for(n=0,r=i.length;n<r;n++)t=i[n],e=e[t];return e},t.prototype.set=function(t){var n,r,i,s,o;r=this.obj;for(n=i=0,o=this.paths.length-1;i<o;n=i+=1)r[s=this.paths[n]]==null&&(r[s]={}),r=r[this.paths[n]];return r[e.last(this.paths)]=t},t}()}),n("Tween",["./Easie","./Util","./Accessor"],function(e,t,n){var r,i;return i=0,r=function(){function r(n){this.id=i++,t.extend(this,n),this._saveProperty="_plunder_tween_save_"+this.id,this._accessorProp="__accessorProp"+this.id,this.easeFunc=e[this.easing||"linear"]||e.linear,this.reset()}return r.prototype.reset=function(){return this._elapsed=0,this.done=this._elapsed>=this.duration,this._targetsInitted=!1},r.prototype.reverse=function(){return new r({property:this.property,targets:this.targets,from:this.to,to:this.from,easing:this.easing,duration:this.duration})},r.prototype.update=function(e){var t,n,r,i;if(this.done||this.disabled)return;this._targetsInitted||this._initTargets(),this._elapsed+=e;if(this._elapsed>=this.duration)this._elapsed=this.duration,this.done=!0;else{i=this.targets;for(n=0,r=i.length;n<r;n++)t=i[n],this._tween(t)}if(this.done)return this._finish()},r.prototype._initTargets=function(){var e,r,i,s,o,u,a;u=this.targets;for(s=0,o=u.length;s<o;s++){r=u[s],r[this._accessorProp]=new n(r,this.property),e=this._get(r),r[this._saveProperty]=t.isArray(e)?e.slice(0):e,i=(a=this.from)!=null?a:e;if(e!=null&&(!t.areSameTypes(i,e)||!t.areSameTypes(i,this.to)))throw new Error("Tween: mismatched types between from/to and targets current value");t.isArray(i)&&(i=i.slice(0)),this._set(r,i)}return this._targetsInitted=!0},r.prototype._finish=function(){var e,t,n,r,i,s;i=this.targets,s=[];for(n=0,r=i.length;n<r;n++)t=i[n],e=this.restoreAfter?t[this._saveProperty]:this.to,this._set(t,e),s.push(this._del(t));return s},r.prototype._tween=function(e){var n,r,i,s,o,u,a,f,l;r=this._get(e),i=(f=this.from)!=null?f:e[this._saveProperty];if(t.isArray(r)){l=[];for(s=u=0,a=r.length;u<a;s=++u)n=r[s],l.push(r[s]=this._tweenValue(this._elapsed,i[s],this.to[s],this.duration));return l}if(t.isNumber(r))return o=this._tweenValue(this._elapsed,i,this.to,this.duration),this._set(e,o);throw new Error("Tween can only operate on numbers or arrays of numbers")},r.prototype._tweenValue=function(e,t,n,r){return this.easeFunc(e,t,n-t,r)},r.prototype._get=function(e){return e[this._accessorProp].get()},r.prototype._set=function(e,t){return e[this._accessorProp].set(t)},r.prototype._del=function(e){return delete e[this._saveProperty],delete e[this._accessorProp]},r}()}),n("Wait",["./Util"],function(e){var t;return t=function(){function t(t){e.extend(this,t);if(this.min!=null&&this.max!=null&&this.min>this.max)throw new Error("Wait: min must be less than max");this._specifiedDuration=this.duration,this.reset()}return t.prototype.reverse=function(){return new t({duration:this.duration})},t.prototype.reset=function(){return this.duration=this._specifiedDuration||e.rand(this.min,this.max),this._elapsed=0,this.done=this._elapsed>=this.duration},t.prototype.update=function(e){if(this.done)return;return this._elapsed+=e,this.done=this._elapsed>=this.duration},t}()});var i=[].slice;n("Repeat",["./Util"],function(e){var t;return t=function(){function e(e,t){this.count=e,this.children=t!=null?t:[],this._currentChild=0,this._curCount=0}return e.prototype.reset=function(){var e,t,n,r,i;this.done=!1,this._currentChild=0,this._curCount=0,r=this.children,i=[];for(t=0,n=r.length;t<n;t++)e=r[t],i.push(e.reset());return i},e.prototype.reverse=function(){var t,n;return n=function(){var e,n,r,i;r=this.children,i=[];for(e=0,n=r.length;e<n;e++)t=r[e],i.push(t.reverse());return i}.call(this),new e(this.count,n.reverse())},e.prototype.update=function(){var e,t,n,r,s,o,u;e=1<=arguments.length?i.call(arguments,0):[],this.done=this._curCount>=this.count;if(this.done)return;n=this.children[this._currentChild],n.update.apply(n,e);if(n.done){++this._currentChild;if(this._currentChild>=this.children.length){this._currentChild=0,++this._curCount,this.done=this._curCount>=this.count;if(!this.done){o=this.children,u=[];for(r=0,s=o.length;r<s;r++)t=o[r],u.push(t.reset());return u}}}},e}()});var i=[].slice;return n("Together",[],function(){var e;return e=function(){function e(e){this.children=e!=null?e:[]}return e.prototype.reset=function(){var e,t,n,r,i;this.done=!1,r=this.children,i=[];for(t=0,n=r.length;t<n;t++)e=r[t],i.push(e.reset());return i},e.prototype.reverse=function(){var t,n;return n=function(){var e,n,r,i;r=this.children,i=[];for(e=0,n=r.length;e<n;e++)t=r[e],i.push(t.reverse());return i}.call(this),new e(n)},e.prototype.update=function(){var e,t,n,r,s,o;e=1<=arguments.length?i.call(arguments,0):[];if(this.done)return;n=!1,o=this.children;for(r=0,s=o.length;r<s;r++)t=o[r],t.update.apply(t,e),t.done||(n=!0);return this.done=!n},e}()}),n("Invoke",["./Util"],function(e){var t;return t=function(){function t(t){e.extend(this,t),this.reset()}return t.prototype.reset=function(){return this.done=!1},t.prototype.reverse=function(){return new t({func:this.func,context:this.context})},t.prototype.update=function(){if(this.done)return;return this.func.call(this.context),this.done=!0},t}()}),n("Timeline",["./Util","./Bezier","./Tween","./Wait","./Repeat","./Together","./Invoke"],function(e,t,n,r,i,s,o){var u;return u=function(){function u(e){this.owner=e;if(!this.owner)throw new Error("Timeline requires an owner");this._buildStack=[],this._childConfigStack=[]}return u.prototype._getTargets=function(t){var n,r;return n=(r=t.target)!=null?r:this.owner,e.toArray(n)},u.prototype._mergeConfig=function(t){return e.any(this._childConfigStack)?e.extend(e.clone(e.last(this._childConfigStack)),t):t},u.prototype._addParentAnimation=function(t,n,r,i){var s,o,u;return e.isFunction(t)?s=t:(o=t,s=n),u=new r(i),o&&this._childConfigStack.push(o),this._buildStack.push(u),s(this),this._buildStack.pop(),o&&this._childConfigStack.pop(),this._pushAnimation(u)},u.prototype._addAnimation=function(e,t){var n;return n=new e(this._mergeConfig(t)),n.targets=this._getTargets(n),this._pushAnimation(n)},u.prototype._pushAnimation=function(e){return this._buildStack.length===0?this.owner.addPlunderAnimation(e):this._buildStack[this._buildStack.length-1].children.push(e),e},u.prototype._fade=function(t,r,i){return e.isNumber(t)&&(t={duration:t}),t.property="alpha",t.from=r,t.to=i,this._addAnimation(n,t)},u.prototype.reverse=function(e){return this._pushAnimation(e.reverse())},u.prototype.setProperty=function(e){return e==null&&(e={}),e.duration=0,e.from=e.to=e.value,this.tween(e)},u.prototype.bezier=function(e){return e==null&&(e={}),this._addAnimation(t,e)},u.prototype.tween=function(e){return e==null&&(e={}),this._addAnimation(n,e)},u.prototype.fadeIn=function(e){return e==null&&(e={}),this._fade(e,0,1)},u.prototype.fadeOut=function(e){return e==null&&(e={}),this._fade(e,1,0)},u.prototype.scale=function(e){return e==null&&(e={}),e.property="scale",this.tween(e)},u.prototype.color=function(e){return e==null&&(e={}),e.property="color",this.tween(e)},u.prototype.rotate=function(e){return e==null&&(e={}),e.property="angle",this.tween(e)},u.prototype.move=function(t){var n,r,i,s;return n=e.clone(t),n.easing=(i=t.easingX)!=null?i:t.easing,n.from=t.from.x,n.to=t.to.x,n.property="x",r=e.clone(t),r.easing=(s=t.easingY)!=null?s:t.easing,r.from=t.from.y,r.to=t.to.y,r.property="y",this.together(function(e){return e.tween(n),e.tween(r)})},u.prototype.together=function(e,t){return this._addParentAnimation(e,t,s)},u.prototype.sequence=function(e,t){return this.repeat(1,e,t)},u.prototype.forever=function(e,t){return this.repeat(Infinity,e,t)},u.prototype.repeat=function(e,t,n){return this._addParentAnimation(t,n,i,e)},u.prototype.wait=function(e){return this.waitBetween(e,e)},u.prototype.waitBetween=function(e,t){return this._addAnimation(r,{min:e,max:t})},u.prototype.invoke=function(e,t){return this._addAnimation(o,{func:e,context:t})},u.prototype.stop=function(){return this.owner.clearPlunderAnimations()},u}()}),n("main",["./Timeline","./Util","./Bezier","./Easie","./Invoke","./Repeat","./Together","./Tween","./Wait"],function(e,t,n,r,i,s,o,u,a){return{Timeline:e,Util:t,Bezier:n,Easie:r,Invoke:i,Repeat:s,Together:o,Tween:u,Wait:a}}),t("main")});

(function() {
  define('../raf',[],function() {
    var lastTime, vendors, x;
    lastTime = 0;
    vendors = ["ms", "moz", "webkit", "o"];
    x = 0;
    while (x < vendors.length && !window.requestAnimationFrame) {
      window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
      window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
      ++x;
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall;
        currTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        id = window.setTimeout(function() {
          return callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      return window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  });

}).call(this);

(function() {
  define('../easing/easingVis',['plunder', '../raf'], function(Plunder) {
    var EasingVis;
    return EasingVis = (function() {
      function EasingVis(canvasId, easingFn, duration) {
        this.duration = duration != null ? duration : 12000;
        this.canvas = document.getElementById(canvasId);
        this.context = this.canvas.getContext('2d');
        this.w = this.canvas.width;
        this.h = this.canvas.height;
        this.easingFn = Plunder.Easie[easingFn];
        this.linear = Plunder.Easie.linear;
        this._updateBound = this._update.bind(this);
        this._elapsed = 0;
        this._lastTimestamp = null;
        this.offset = 40;
        this._pathBuffer = this._createPathBuffer(this.w, this.h, this.duration, this.offset);
      }

      EasingVis.prototype.go = function() {
        return this._updateBound(0);
      };

      EasingVis.prototype._update = function(ts) {
        var delta;
        if (!this._lastTimestamp) {
          this._lastTimestamp = ts;
        }
        delta = ts - this._lastTimestamp;
        this._lastTimestamp = ts;
        this.context.drawImage(this._pathBuffer, 0, 0);
        this._drawNode(delta, this.offset / 4, Plunder.Easie.linear, 'rgb(140, 140, 140)');
        this._drawNode(delta, this.offset - 4, this.easingFn, 'rgb(222, 147, 95)', this.offset);
        return window.requestAnimationFrame(this._updateBound);
      };

      EasingVis.prototype._drawNode = function(delta, x, easingFn, color, xExpandOffset) {
        var ex, y;
        if (xExpandOffset == null) {
          xExpandOffset = null;
        }
        this._elapsed += delta;
        if (this._elapsed >= this.duration) {
          this._elapsed -= this.duration;
        }
        y = easingFn(this._elapsed, 0, this.h, this.duration);
        if (xExpandOffset) {
          this.context.fillStyle = 'rgba(180, 180, 180, 0.5)';
          ex = this.linear(this._elapsed, xExpandOffset, this.w - xExpandOffset, this.duration);
          this.context.fillRect(x, y - 1.5, ex - x - 1.5, 2);
        }
        this.context.fillStyle = color;
        return this.context.fillRect(x - 4, y - 4, 8, 8);
      };

      EasingVis.prototype._createPathBuffer = function(w, h, d, offset) {
        var canvas, context, i, x, y, _i;
        canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        context = canvas.getContext('2d');
        context.fillStyle = 'black';
        context.fillRect(0, 0, w, h);
        context.fillStyle = 'rgb(200, 200, 200)';
        for (i = _i = 0; _i <= d; i = _i += 4) {
          x = this.linear(i, offset, w - offset, d);
          y = this.easingFn(i, 0, h, d);
          context.fillRect(x - 1.5, y - 1.5, 3, 3);
        }
        context.fillStyle = 'rgb(80,80,80)';
        context.fillRect(0, 0, offset, h);
        return canvas;
      };

      return EasingVis;

    })();
  });

}).call(this);

(function() {
  define('../domReady',[],function() {
    var callReady, doc, domReady, isBrowser, isPageLoaded, isTop, pageLoaded, readyCalls, runCallbacks, scrollIntervalId, testDiv;
    isPageLoaded = false;
    readyCalls = [];
    runCallbacks = function(callbacks) {
      var i, _results;
      i = void 0;
      i = 0;
      _results = [];
      while (i < callbacks.length) {
        callbacks[i](doc);
        _results.push(i += 1);
      }
      return _results;
    };
    callReady = function() {
      var callbacks;
      callbacks = readyCalls;
      if (isPageLoaded) {
        if (callbacks.length) {
          readyCalls = [];
          return runCallbacks(callbacks);
        }
      }
    };
    /*
    Sets the page as loaded.
    */

    pageLoaded = function() {
      if (!isPageLoaded) {
        isPageLoaded = true;
        if (scrollIntervalId) {
          clearInterval(scrollIntervalId);
        }
        return callReady();
      }
    };
    /*
    START OF PUBLIC API *
    */

    /*
    Registers a callback for DOM ready. If DOM is already ready, the
    callback is called immediately.
    @param {Function} callback
    */

    domReady = function(callback) {
      if (isPageLoaded) {
        callback(doc);
      } else {
        readyCalls.push(callback);
      }
      return domReady;
    };
    "use strict";
    isTop = void 0;
    testDiv = void 0;
    scrollIntervalId = void 0;
    isBrowser = typeof window !== "undefined" && window.document;
    isPageLoaded = !isBrowser;
    doc = (isBrowser ? document : null);
    readyCalls = [];
    if (isBrowser) {
      if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", pageLoaded, false);
        window.addEventListener("load", pageLoaded, false);
      } else if (window.attachEvent) {
        window.attachEvent("onload", pageLoaded);
        testDiv = document.createElement("div");
        try {
          isTop = window.frameElement === null;
        } catch (_error) {}
        if (testDiv.doScroll && isTop && window.external) {
          scrollIntervalId = setInterval(function() {
            try {
              testDiv.doScroll();
              return pageLoaded();
            } catch (_error) {}
          }, 30);
        }
      }
      if (document.readyState === "complete") {
        pageLoaded();
      }
    }
    domReady.version = "2.0.1";
    /*
    Loader Plugin API method
    */

    domReady.load = function(name, req, onLoad, config) {
      if (config.isBuild) {
        return onLoad(null);
      } else {
        return domReady(onLoad);
      }
    };
    /*
    END OF PUBLIC API *
    */

    return domReady;
  });

}).call(this);

(function() {
  var __hasProp = {}.hasOwnProperty;

  define('../easing/easingDoc',['plunder', './easingVis', '../domReady'], function(Plunder, EasingVis, domReady) {
    var addDemoEntry, addTocEntry, createContainer, easingDoc;
    addTocEntry = function(tocId, id) {
      var li, toc;
      toc = document.getElementById(tocId);
      li = document.createElement('li');
      li.innerHTML = "- <a href='#" + id + "'>" + id + "</a>";
      return toc.appendChild(li);
    };
    createContainer = function(containerId, key) {
      var canvas, div, h, width;
      width = 500;
      div = document.createElement('div');
      div.style.display = 'inline-block';
      div.style.width = "" + width + "px";
      div.style.marginLeft = '5px';
      div.style.marginRight = '5px';
      div.id = key;
      h = document.createElement('h3');
      h.innerHTML = key;
      div.appendChild(h);
      canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = 200;
      canvas.id = "canvas-" + key;
      div.appendChild(canvas);
      document.getElementById(containerId).appendChild(div);
      return canvas.id;
    };
    addDemoEntry = function(containerId, easingFn) {
      var canvasId;
      canvasId = createContainer(containerId, easingFn);
      return new EasingVis(canvasId, easingFn).go();
    };
    easingDoc = function(tocId, demoContainerId) {
      return domReady(function() {
        var key, value, _ref, _results;
        _ref = Plunder.Easie;
        _results = [];
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          addTocEntry(tocId, key);
          _results.push(addDemoEntry(demoContainerId, key));
        }
        return _results;
      });
    };
    return easingDoc;
  });

}).call(this);

(function() {
  require.config({
    paths: {
      plunder: '../../bower_components/plunder/dist/plunder'
    }
  });

  require(['../easing/easingDoc'], function(easingDoc) {
    'use strict';
    return easingDoc('easing_toc_section', 'easing_demo_container');
  });

}).call(this);

define("main", function(){});
}());